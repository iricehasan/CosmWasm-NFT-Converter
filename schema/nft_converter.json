{
  "contract_name": "nft_converter",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "admin",
      "cw721_code_id",
      "name",
      "symbol"
    ],
    "properties": {
      "admin": {
        "type": "string"
      },
      "cw721_code_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "name": {
        "type": "string"
      },
      "symbol": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "receive_nft"
        ],
        "properties": {
          "receive_nft": {
            "$ref": "#/definitions/Cw721ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "convert"
        ],
        "properties": {
          "convert": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "extension": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Metadata"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "token_id": {
                "type": "string"
              },
              "token_uri": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "mint"
        ],
        "properties": {
          "mint": {
            "type": "object",
            "required": [
              "recipient",
              "token_id"
            ],
            "properties": {
              "extension": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Metadata"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "recipient": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              },
              "token_uri": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Cw721ReceiveMsg": {
        "description": "Cw721ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "msg",
          "sender",
          "token_id"
        ],
        "properties": {
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "animation_url": {
            "type": [
              "string",
              "null"
            ]
          },
          "attributes": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Trait"
            }
          },
          "background_color": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "external_url": {
            "type": [
              "string",
              "null"
            ]
          },
          "image": {
            "type": [
              "string",
              "null"
            ]
          },
          "image_data": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "youtube_url": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "Trait": {
        "type": "object",
        "required": [
          "trait_type",
          "value"
        ],
        "properties": {
          "display_type": {
            "type": [
              "string",
              "null"
            ]
          },
          "trait_type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "operations"
        ],
        "properties": {
          "operations": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "token_info"
        ],
        "properties": {
          "token_info": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "nft_addr"
      ],
      "properties": {
        "nft_addr": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "operations": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OperationsResponse",
      "type": "object",
      "required": [
        "n_burns",
        "n_mints"
      ],
      "properties": {
        "n_burns": {
          "$ref": "#/definitions/Uint128"
        },
        "n_mints": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "token_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokenInfoResponse",
      "type": "object",
      "required": [
        "nft_addr",
        "sender",
        "token_id"
      ],
      "properties": {
        "nft_addr": {
          "type": "string"
        },
        "sender": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
